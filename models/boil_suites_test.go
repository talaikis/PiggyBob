// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Currencies", testCurrencies)
	t.Run("Expenses", testExpenses)
	t.Run("ExpenseCategories", testExpenseCategories)
	t.Run("Incomes", testIncomes)
	t.Run("IncomeCategories", testIncomeCategories)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Currencies", testCurrenciesDelete)
	t.Run("Expenses", testExpensesDelete)
	t.Run("ExpenseCategories", testExpenseCategoriesDelete)
	t.Run("Incomes", testIncomesDelete)
	t.Run("IncomeCategories", testIncomeCategoriesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Currencies", testCurrenciesQueryDeleteAll)
	t.Run("Expenses", testExpensesQueryDeleteAll)
	t.Run("ExpenseCategories", testExpenseCategoriesQueryDeleteAll)
	t.Run("Incomes", testIncomesQueryDeleteAll)
	t.Run("IncomeCategories", testIncomeCategoriesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Currencies", testCurrenciesSliceDeleteAll)
	t.Run("Expenses", testExpensesSliceDeleteAll)
	t.Run("ExpenseCategories", testExpenseCategoriesSliceDeleteAll)
	t.Run("Incomes", testIncomesSliceDeleteAll)
	t.Run("IncomeCategories", testIncomeCategoriesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Currencies", testCurrenciesExists)
	t.Run("Expenses", testExpensesExists)
	t.Run("ExpenseCategories", testExpenseCategoriesExists)
	t.Run("Incomes", testIncomesExists)
	t.Run("IncomeCategories", testIncomeCategoriesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Currencies", testCurrenciesFind)
	t.Run("Expenses", testExpensesFind)
	t.Run("ExpenseCategories", testExpenseCategoriesFind)
	t.Run("Incomes", testIncomesFind)
	t.Run("IncomeCategories", testIncomeCategoriesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Currencies", testCurrenciesBind)
	t.Run("Expenses", testExpensesBind)
	t.Run("ExpenseCategories", testExpenseCategoriesBind)
	t.Run("Incomes", testIncomesBind)
	t.Run("IncomeCategories", testIncomeCategoriesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Currencies", testCurrenciesOne)
	t.Run("Expenses", testExpensesOne)
	t.Run("ExpenseCategories", testExpenseCategoriesOne)
	t.Run("Incomes", testIncomesOne)
	t.Run("IncomeCategories", testIncomeCategoriesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Currencies", testCurrenciesAll)
	t.Run("Expenses", testExpensesAll)
	t.Run("ExpenseCategories", testExpenseCategoriesAll)
	t.Run("Incomes", testIncomesAll)
	t.Run("IncomeCategories", testIncomeCategoriesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Currencies", testCurrenciesCount)
	t.Run("Expenses", testExpensesCount)
	t.Run("ExpenseCategories", testExpenseCategoriesCount)
	t.Run("Incomes", testIncomesCount)
	t.Run("IncomeCategories", testIncomeCategoriesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Currencies", testCurrenciesHooks)
	t.Run("Expenses", testExpensesHooks)
	t.Run("ExpenseCategories", testExpenseCategoriesHooks)
	t.Run("Incomes", testIncomesHooks)
	t.Run("IncomeCategories", testIncomeCategoriesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Currencies", testCurrenciesInsert)
	t.Run("Currencies", testCurrenciesInsertWhitelist)
	t.Run("Expenses", testExpensesInsert)
	t.Run("Expenses", testExpensesInsertWhitelist)
	t.Run("ExpenseCategories", testExpenseCategoriesInsert)
	t.Run("ExpenseCategories", testExpenseCategoriesInsertWhitelist)
	t.Run("Incomes", testIncomesInsert)
	t.Run("Incomes", testIncomesInsertWhitelist)
	t.Run("IncomeCategories", testIncomeCategoriesInsert)
	t.Run("IncomeCategories", testIncomeCategoriesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ExpenseToUserUsingUser", testExpenseToOneUserUsingUser)
	t.Run("ExpenseToExpenseCategoryUsingCategory", testExpenseToOneExpenseCategoryUsingCategory)
	t.Run("ExpenseToCurrencyUsingCurrency", testExpenseToOneCurrencyUsingCurrency)
	t.Run("IncomeToUserUsingUser", testIncomeToOneUserUsingUser)
	t.Run("IncomeToIncomeCategoryUsingCategory", testIncomeToOneIncomeCategoryUsingCategory)
	t.Run("IncomeToCurrencyUsingCurrency", testIncomeToOneCurrencyUsingCurrency)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CurrencyToExpenses", testCurrencyToManyExpenses)
	t.Run("CurrencyToIncomes", testCurrencyToManyIncomes)
	t.Run("ExpenseCategoryToCategoryExpenses", testExpenseCategoryToManyCategoryExpenses)
	t.Run("IncomeCategoryToCategoryIncomes", testIncomeCategoryToManyCategoryIncomes)
	t.Run("UserToExpenses", testUserToManyExpenses)
	t.Run("UserToIncomes", testUserToManyIncomes)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ExpenseToUserUsingUser", testExpenseToOneSetOpUserUsingUser)
	t.Run("ExpenseToExpenseCategoryUsingCategory", testExpenseToOneSetOpExpenseCategoryUsingCategory)
	t.Run("ExpenseToCurrencyUsingCurrency", testExpenseToOneSetOpCurrencyUsingCurrency)
	t.Run("IncomeToUserUsingUser", testIncomeToOneSetOpUserUsingUser)
	t.Run("IncomeToIncomeCategoryUsingCategory", testIncomeToOneSetOpIncomeCategoryUsingCategory)
	t.Run("IncomeToCurrencyUsingCurrency", testIncomeToOneSetOpCurrencyUsingCurrency)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CurrencyToExpenses", testCurrencyToManyAddOpExpenses)
	t.Run("CurrencyToIncomes", testCurrencyToManyAddOpIncomes)
	t.Run("ExpenseCategoryToCategoryExpenses", testExpenseCategoryToManyAddOpCategoryExpenses)
	t.Run("IncomeCategoryToCategoryIncomes", testIncomeCategoryToManyAddOpCategoryIncomes)
	t.Run("UserToExpenses", testUserToManyAddOpExpenses)
	t.Run("UserToIncomes", testUserToManyAddOpIncomes)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Currencies", testCurrenciesReload)
	t.Run("Expenses", testExpensesReload)
	t.Run("ExpenseCategories", testExpenseCategoriesReload)
	t.Run("Incomes", testIncomesReload)
	t.Run("IncomeCategories", testIncomeCategoriesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Currencies", testCurrenciesReloadAll)
	t.Run("Expenses", testExpensesReloadAll)
	t.Run("ExpenseCategories", testExpenseCategoriesReloadAll)
	t.Run("Incomes", testIncomesReloadAll)
	t.Run("IncomeCategories", testIncomeCategoriesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Currencies", testCurrenciesSelect)
	t.Run("Expenses", testExpensesSelect)
	t.Run("ExpenseCategories", testExpenseCategoriesSelect)
	t.Run("Incomes", testIncomesSelect)
	t.Run("IncomeCategories", testIncomeCategoriesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Currencies", testCurrenciesUpdate)
	t.Run("Expenses", testExpensesUpdate)
	t.Run("ExpenseCategories", testExpenseCategoriesUpdate)
	t.Run("Incomes", testIncomesUpdate)
	t.Run("IncomeCategories", testIncomeCategoriesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Currencies", testCurrenciesSliceUpdateAll)
	t.Run("Expenses", testExpensesSliceUpdateAll)
	t.Run("ExpenseCategories", testExpenseCategoriesSliceUpdateAll)
	t.Run("Incomes", testIncomesSliceUpdateAll)
	t.Run("IncomeCategories", testIncomeCategoriesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Currencies", testCurrenciesUpsert)
	t.Run("Expenses", testExpensesUpsert)
	t.Run("ExpenseCategories", testExpenseCategoriesUpsert)
	t.Run("Incomes", testIncomesUpsert)
	t.Run("IncomeCategories", testIncomeCategoriesUpsert)
	t.Run("Users", testUsersUpsert)
}
