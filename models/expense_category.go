// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// ExpenseCategory is an object representing the database table.
type ExpenseCategory struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *expenseCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L expenseCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// expenseCategoryR is where relationships are stored.
type expenseCategoryR struct {
	CategoryExpenses ExpenseSlice
}

// expenseCategoryL is where Load methods for each relationship are stored.
type expenseCategoryL struct{}

var (
	expenseCategoryColumns               = []string{"id", "title", "description"}
	expenseCategoryColumnsWithoutDefault = []string{"title", "description"}
	expenseCategoryColumnsWithDefault    = []string{"id"}
	expenseCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExpenseCategorySlice is an alias for a slice of pointers to ExpenseCategory.
	// This should generally be used opposed to []ExpenseCategory.
	ExpenseCategorySlice []*ExpenseCategory
	// ExpenseCategoryHook is the signature for custom ExpenseCategory hook methods
	ExpenseCategoryHook func(boil.Executor, *ExpenseCategory) error

	expenseCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	expenseCategoryType                 = reflect.TypeOf(&ExpenseCategory{})
	expenseCategoryMapping              = queries.MakeStructMapping(expenseCategoryType)
	expenseCategoryPrimaryKeyMapping, _ = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, expenseCategoryPrimaryKeyColumns)
	expenseCategoryInsertCacheMut       sync.RWMutex
	expenseCategoryInsertCache          = make(map[string]insertCache)
	expenseCategoryUpdateCacheMut       sync.RWMutex
	expenseCategoryUpdateCache          = make(map[string]updateCache)
	expenseCategoryUpsertCacheMut       sync.RWMutex
	expenseCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var expenseCategoryBeforeInsertHooks []ExpenseCategoryHook
var expenseCategoryBeforeUpdateHooks []ExpenseCategoryHook
var expenseCategoryBeforeDeleteHooks []ExpenseCategoryHook
var expenseCategoryBeforeUpsertHooks []ExpenseCategoryHook

var expenseCategoryAfterInsertHooks []ExpenseCategoryHook
var expenseCategoryAfterSelectHooks []ExpenseCategoryHook
var expenseCategoryAfterUpdateHooks []ExpenseCategoryHook
var expenseCategoryAfterDeleteHooks []ExpenseCategoryHook
var expenseCategoryAfterUpsertHooks []ExpenseCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExpenseCategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExpenseCategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExpenseCategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExpenseCategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExpenseCategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExpenseCategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExpenseCategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExpenseCategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExpenseCategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range expenseCategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExpenseCategoryHook registers your hook function for all future operations.
func AddExpenseCategoryHook(hookPoint boil.HookPoint, expenseCategoryHook ExpenseCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		expenseCategoryBeforeInsertHooks = append(expenseCategoryBeforeInsertHooks, expenseCategoryHook)
	case boil.BeforeUpdateHook:
		expenseCategoryBeforeUpdateHooks = append(expenseCategoryBeforeUpdateHooks, expenseCategoryHook)
	case boil.BeforeDeleteHook:
		expenseCategoryBeforeDeleteHooks = append(expenseCategoryBeforeDeleteHooks, expenseCategoryHook)
	case boil.BeforeUpsertHook:
		expenseCategoryBeforeUpsertHooks = append(expenseCategoryBeforeUpsertHooks, expenseCategoryHook)
	case boil.AfterInsertHook:
		expenseCategoryAfterInsertHooks = append(expenseCategoryAfterInsertHooks, expenseCategoryHook)
	case boil.AfterSelectHook:
		expenseCategoryAfterSelectHooks = append(expenseCategoryAfterSelectHooks, expenseCategoryHook)
	case boil.AfterUpdateHook:
		expenseCategoryAfterUpdateHooks = append(expenseCategoryAfterUpdateHooks, expenseCategoryHook)
	case boil.AfterDeleteHook:
		expenseCategoryAfterDeleteHooks = append(expenseCategoryAfterDeleteHooks, expenseCategoryHook)
	case boil.AfterUpsertHook:
		expenseCategoryAfterUpsertHooks = append(expenseCategoryAfterUpsertHooks, expenseCategoryHook)
	}
}

// OneP returns a single expenseCategory record from the query, and panics on error.
func (q expenseCategoryQuery) OneP() *ExpenseCategory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single expenseCategory record from the query.
func (q expenseCategoryQuery) One() (*ExpenseCategory, error) {
	o := &ExpenseCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for expense_category")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all ExpenseCategory records from the query, and panics on error.
func (q expenseCategoryQuery) AllP() ExpenseCategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ExpenseCategory records from the query.
func (q expenseCategoryQuery) All() (ExpenseCategorySlice, error) {
	var o []*ExpenseCategory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExpenseCategory slice")
	}

	if len(expenseCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all ExpenseCategory records in the query, and panics on error.
func (q expenseCategoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ExpenseCategory records in the query.
func (q expenseCategoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count expense_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q expenseCategoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q expenseCategoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if expense_category exists")
	}

	return count > 0, nil
}

// CategoryExpensesG retrieves all the expense's expense via category_id column.
func (o *ExpenseCategory) CategoryExpensesG(mods ...qm.QueryMod) expenseQuery {
	return o.CategoryExpenses(boil.GetDB(), mods...)
}

// CategoryExpenses retrieves all the expense's expense with an executor via category_id column.
func (o *ExpenseCategory) CategoryExpenses(exec boil.Executor, mods ...qm.QueryMod) expenseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"category_id\"=?", o.ID),
	)

	query := Expenses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"expense\" as \"a\"")
	return query
}

// LoadCategoryExpenses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (expenseCategoryL) LoadCategoryExpenses(e boil.Executor, singular bool, maybeExpenseCategory interface{}) error {
	var slice []*ExpenseCategory
	var object *ExpenseCategory

	count := 1
	if singular {
		object = maybeExpenseCategory.(*ExpenseCategory)
	} else {
		slice = *maybeExpenseCategory.(*[]*ExpenseCategory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &expenseCategoryR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &expenseCategoryR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"expense\" where \"category_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load expense")
	}
	defer results.Close()

	var resultSlice []*Expense
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice expense")
	}

	if len(expenseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryExpenses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryExpenses = append(local.R.CategoryExpenses, foreign)
				break
			}
		}
	}

	return nil
}

// AddCategoryExpensesG adds the given related objects to the existing relationships
// of the expense_category, optionally inserting them as new records.
// Appends related to o.R.CategoryExpenses.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *ExpenseCategory) AddCategoryExpensesG(insert bool, related ...*Expense) error {
	return o.AddCategoryExpenses(boil.GetDB(), insert, related...)
}

// AddCategoryExpensesP adds the given related objects to the existing relationships
// of the expense_category, optionally inserting them as new records.
// Appends related to o.R.CategoryExpenses.
// Sets related.R.Category appropriately.
// Panics on error.
func (o *ExpenseCategory) AddCategoryExpensesP(exec boil.Executor, insert bool, related ...*Expense) {
	if err := o.AddCategoryExpenses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryExpensesGP adds the given related objects to the existing relationships
// of the expense_category, optionally inserting them as new records.
// Appends related to o.R.CategoryExpenses.
// Sets related.R.Category appropriately.
// Uses the global database handle and panics on error.
func (o *ExpenseCategory) AddCategoryExpensesGP(insert bool, related ...*Expense) {
	if err := o.AddCategoryExpenses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryExpenses adds the given related objects to the existing relationships
// of the expense_category, optionally inserting them as new records.
// Appends related to o.R.CategoryExpenses.
// Sets related.R.Category appropriately.
func (o *ExpenseCategory) AddCategoryExpenses(exec boil.Executor, insert bool, related ...*Expense) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"expense\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, expensePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.CategoryID, rel.DateTime, rel.Title}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &expenseCategoryR{
			CategoryExpenses: related,
		}
	} else {
		o.R.CategoryExpenses = append(o.R.CategoryExpenses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &expenseR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// ExpenseCategoriesG retrieves all records.
func ExpenseCategoriesG(mods ...qm.QueryMod) expenseCategoryQuery {
	return ExpenseCategories(boil.GetDB(), mods...)
}

// ExpenseCategories retrieves all the records using an executor.
func ExpenseCategories(exec boil.Executor, mods ...qm.QueryMod) expenseCategoryQuery {
	mods = append(mods, qm.From("\"expense_category\""))
	return expenseCategoryQuery{NewQuery(exec, mods...)}
}

// FindExpenseCategoryG retrieves a single record by ID.
func FindExpenseCategoryG(id int, selectCols ...string) (*ExpenseCategory, error) {
	return FindExpenseCategory(boil.GetDB(), id, selectCols...)
}

// FindExpenseCategoryGP retrieves a single record by ID, and panics on error.
func FindExpenseCategoryGP(id int, selectCols ...string) *ExpenseCategory {
	retobj, err := FindExpenseCategory(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindExpenseCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExpenseCategory(exec boil.Executor, id int, selectCols ...string) (*ExpenseCategory, error) {
	expenseCategoryObj := &ExpenseCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"expense_category\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(expenseCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from expense_category")
	}

	return expenseCategoryObj, nil
}

// FindExpenseCategoryP retrieves a single record by ID with an executor, and panics on error.
func FindExpenseCategoryP(exec boil.Executor, id int, selectCols ...string) *ExpenseCategory {
	retobj, err := FindExpenseCategory(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExpenseCategory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ExpenseCategory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ExpenseCategory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ExpenseCategory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no expense_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseCategoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	expenseCategoryInsertCacheMut.RLock()
	cache, cached := expenseCategoryInsertCache[key]
	expenseCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			expenseCategoryColumns,
			expenseCategoryColumnsWithDefault,
			expenseCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"expense_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"expense_category\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into expense_category")
	}

	if !cached {
		expenseCategoryInsertCacheMut.Lock()
		expenseCategoryInsertCache[key] = cache
		expenseCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ExpenseCategory record. See Update for
// whitelist behavior description.
func (o *ExpenseCategory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ExpenseCategory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ExpenseCategory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the ExpenseCategory, and panics on error.
// See Update for whitelist behavior description.
func (o *ExpenseCategory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ExpenseCategory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ExpenseCategory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	expenseCategoryUpdateCacheMut.RLock()
	cache, cached := expenseCategoryUpdateCache[key]
	expenseCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			expenseCategoryColumns,
			expenseCategoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update expense_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"expense_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, expenseCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, append(wl, expenseCategoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update expense_category row")
	}

	if !cached {
		expenseCategoryUpdateCacheMut.Lock()
		expenseCategoryUpdateCache[key] = cache
		expenseCategoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q expenseCategoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q expenseCategoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for expense_category")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExpenseCategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ExpenseCategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ExpenseCategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExpenseCategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"expense_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, expenseCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in expenseCategory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExpenseCategory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ExpenseCategory) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ExpenseCategory) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ExpenseCategory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no expense_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(expenseCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	expenseCategoryUpsertCacheMut.RLock()
	cache, cached := expenseCategoryUpsertCache[key]
	expenseCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			expenseCategoryColumns,
			expenseCategoryColumnsWithDefault,
			expenseCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			expenseCategoryColumns,
			expenseCategoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert expense_category, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(expenseCategoryPrimaryKeyColumns))
			copy(conflict, expenseCategoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"expense_category\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(expenseCategoryType, expenseCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert expense_category")
	}

	if !cached {
		expenseCategoryUpsertCacheMut.Lock()
		expenseCategoryUpsertCache[key] = cache
		expenseCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single ExpenseCategory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ExpenseCategory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single ExpenseCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExpenseCategory) DeleteG() error {
	if o == nil {
		return errors.New("models: no ExpenseCategory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ExpenseCategory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ExpenseCategory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ExpenseCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExpenseCategory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ExpenseCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), expenseCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"expense_category\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from expense_category")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q expenseCategoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q expenseCategoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no expenseCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from expense_category")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ExpenseCategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ExpenseCategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no ExpenseCategory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ExpenseCategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExpenseCategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ExpenseCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(expenseCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"expense_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from expenseCategory slice")
	}

	if len(expenseCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ExpenseCategory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ExpenseCategory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExpenseCategory) ReloadG() error {
	if o == nil {
		return errors.New("models: no ExpenseCategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExpenseCategory) Reload(exec boil.Executor) error {
	ret, err := FindExpenseCategory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExpenseCategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExpenseCategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExpenseCategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ExpenseCategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExpenseCategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	expenseCategories := ExpenseCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), expenseCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"expense_category\".* FROM \"expense_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, expenseCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&expenseCategories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExpenseCategorySlice")
	}

	*o = expenseCategories

	return nil
}

// ExpenseCategoryExists checks if the ExpenseCategory row exists.
func ExpenseCategoryExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"expense_category\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if expense_category exists")
	}

	return exists, nil
}

// ExpenseCategoryExistsG checks if the ExpenseCategory row exists.
func ExpenseCategoryExistsG(id int) (bool, error) {
	return ExpenseCategoryExists(boil.GetDB(), id)
}

// ExpenseCategoryExistsGP checks if the ExpenseCategory row exists. Panics on error.
func ExpenseCategoryExistsGP(id int) bool {
	e, err := ExpenseCategoryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExpenseCategoryExistsP checks if the ExpenseCategory row exists. Panics on error.
func ExpenseCategoryExistsP(exec boil.Executor, id int) bool {
	e, err := ExpenseCategoryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
