// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Income is an object representing the database table.
type Income struct {
	ID         int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     int          `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CategoryID int          `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	DateTime   time.Time    `boil:"date_time" json:"date_time" toml:"date_time" yaml:"date_time"`
	Title      string       `boil:"title" json:"title" toml:"title" yaml:"title"`
	Reference  null.String  `boil:"reference" json:"reference,omitempty" toml:"reference" yaml:"reference,omitempty"`
	Value      float64      `boil:"value" json:"value" toml:"value" yaml:"value"`
	CurrencyID int          `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	Rate       null.Float64 `boil:"rate" json:"rate,omitempty" toml:"rate" yaml:"rate,omitempty"`

	R *incomeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incomeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// incomeR is where relationships are stored.
type incomeR struct {
	User     *User
	Category *IncomeCategory
	Currency *Currency
}

// incomeL is where Load methods for each relationship are stored.
type incomeL struct{}

var (
	incomeColumns               = []string{"id", "user_id", "category_id", "date_time", "title", "reference", "value", "currency_id", "rate"}
	incomeColumnsWithoutDefault = []string{"user_id", "category_id", "date_time", "title", "reference", "value", "currency_id"}
	incomeColumnsWithDefault    = []string{"id", "rate"}
	incomePrimaryKeyColumns     = []string{"user_id", "category_id", "date_time", "title"}
)

type (
	// IncomeSlice is an alias for a slice of pointers to Income.
	// This should generally be used opposed to []Income.
	IncomeSlice []*Income
	// IncomeHook is the signature for custom Income hook methods
	IncomeHook func(boil.Executor, *Income) error

	incomeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incomeType                 = reflect.TypeOf(&Income{})
	incomeMapping              = queries.MakeStructMapping(incomeType)
	incomePrimaryKeyMapping, _ = queries.BindMapping(incomeType, incomeMapping, incomePrimaryKeyColumns)
	incomeInsertCacheMut       sync.RWMutex
	incomeInsertCache          = make(map[string]insertCache)
	incomeUpdateCacheMut       sync.RWMutex
	incomeUpdateCache          = make(map[string]updateCache)
	incomeUpsertCacheMut       sync.RWMutex
	incomeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var incomeBeforeInsertHooks []IncomeHook
var incomeBeforeUpdateHooks []IncomeHook
var incomeBeforeDeleteHooks []IncomeHook
var incomeBeforeUpsertHooks []IncomeHook

var incomeAfterInsertHooks []IncomeHook
var incomeAfterSelectHooks []IncomeHook
var incomeAfterUpdateHooks []IncomeHook
var incomeAfterDeleteHooks []IncomeHook
var incomeAfterUpsertHooks []IncomeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Income) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Income) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Income) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Income) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Income) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Income) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Income) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Income) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Income) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIncomeHook registers your hook function for all future operations.
func AddIncomeHook(hookPoint boil.HookPoint, incomeHook IncomeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		incomeBeforeInsertHooks = append(incomeBeforeInsertHooks, incomeHook)
	case boil.BeforeUpdateHook:
		incomeBeforeUpdateHooks = append(incomeBeforeUpdateHooks, incomeHook)
	case boil.BeforeDeleteHook:
		incomeBeforeDeleteHooks = append(incomeBeforeDeleteHooks, incomeHook)
	case boil.BeforeUpsertHook:
		incomeBeforeUpsertHooks = append(incomeBeforeUpsertHooks, incomeHook)
	case boil.AfterInsertHook:
		incomeAfterInsertHooks = append(incomeAfterInsertHooks, incomeHook)
	case boil.AfterSelectHook:
		incomeAfterSelectHooks = append(incomeAfterSelectHooks, incomeHook)
	case boil.AfterUpdateHook:
		incomeAfterUpdateHooks = append(incomeAfterUpdateHooks, incomeHook)
	case boil.AfterDeleteHook:
		incomeAfterDeleteHooks = append(incomeAfterDeleteHooks, incomeHook)
	case boil.AfterUpsertHook:
		incomeAfterUpsertHooks = append(incomeAfterUpsertHooks, incomeHook)
	}
}

// OneP returns a single income record from the query, and panics on error.
func (q incomeQuery) OneP() *Income {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single income record from the query.
func (q incomeQuery) One() (*Income, error) {
	o := &Income{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for income")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Income records from the query, and panics on error.
func (q incomeQuery) AllP() IncomeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Income records from the query.
func (q incomeQuery) All() (IncomeSlice, error) {
	var o []*Income

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Income slice")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Income records in the query, and panics on error.
func (q incomeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Income records in the query.
func (q incomeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count income rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q incomeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q incomeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if income exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *Income) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *Income) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// CategoryG pointed to by the foreign key.
func (o *Income) CategoryG(mods ...qm.QueryMod) incomeCategoryQuery {
	return o.Category(boil.GetDB(), mods...)
}

// Category pointed to by the foreign key.
func (o *Income) Category(exec boil.Executor, mods ...qm.QueryMod) incomeCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := IncomeCategories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"income_category\"")

	return query
}

// CurrencyG pointed to by the foreign key.
func (o *Income) CurrencyG(mods ...qm.QueryMod) currencyQuery {
	return o.Currency(boil.GetDB(), mods...)
}

// Currency pointed to by the foreign key.
func (o *Income) Currency(exec boil.Executor, mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(exec, queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (incomeL) LoadUser(e boil.Executor, singular bool, maybeIncome interface{}) error {
	var slice []*Income
	var object *Income

	count := 1
	if singular {
		object = maybeIncome.(*Income)
	} else {
		slice = *maybeIncome.(*[]*Income)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &incomeR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"users\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (incomeL) LoadCategory(e boil.Executor, singular bool, maybeIncome interface{}) error {
	var slice []*Income
	var object *Income

	count := 1
	if singular {
		object = maybeIncome.(*Income)
	} else {
		slice = *maybeIncome.(*[]*Income)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &incomeR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"income_category\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IncomeCategory")
	}
	defer results.Close()

	var resultSlice []*IncomeCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IncomeCategory")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Category = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (incomeL) LoadCurrency(e boil.Executor, singular bool, maybeIncome interface{}) error {
	var slice []*Income
	var object *Income

	count := 1
	if singular {
		object = maybeIncome.(*Income)
	} else {
		slice = *maybeIncome.(*[]*Income)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &incomeR{}
		}
		args[0] = object.CurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeR{}
			}
			args[i] = obj.CurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"currency\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}
	defer results.Close()

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Currency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the income to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Incomes.
// Uses the global database handle.
func (o *Income) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the income to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Incomes.
// Panics on error.
func (o *Income) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the income to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Incomes.
// Uses the global database handle and panics on error.
func (o *Income) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the income to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Incomes.
func (o *Income) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"income\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, incomePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CategoryID, o.DateTime, o.Title}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &incomeR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Incomes: IncomeSlice{o},
		}
	} else {
		related.R.Incomes = append(related.R.Incomes, o)
	}

	return nil
}

// SetCategoryG of the income to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryIncomes.
// Uses the global database handle.
func (o *Income) SetCategoryG(insert bool, related *IncomeCategory) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategoryP of the income to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryIncomes.
// Panics on error.
func (o *Income) SetCategoryP(exec boil.Executor, insert bool, related *IncomeCategory) {
	if err := o.SetCategory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoryGP of the income to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryIncomes.
// Uses the global database handle and panics on error.
func (o *Income) SetCategoryGP(insert bool, related *IncomeCategory) {
	if err := o.SetCategory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategory of the income to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryIncomes.
func (o *Income) SetCategory(exec boil.Executor, insert bool, related *IncomeCategory) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"income\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, incomePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CategoryID, o.DateTime, o.Title}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID

	if o.R == nil {
		o.R = &incomeR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &incomeCategoryR{
			CategoryIncomes: IncomeSlice{o},
		}
	} else {
		related.R.CategoryIncomes = append(related.R.CategoryIncomes, o)
	}

	return nil
}

// SetCurrencyG of the income to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Incomes.
// Uses the global database handle.
func (o *Income) SetCurrencyG(insert bool, related *Currency) error {
	return o.SetCurrency(boil.GetDB(), insert, related)
}

// SetCurrencyP of the income to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Incomes.
// Panics on error.
func (o *Income) SetCurrencyP(exec boil.Executor, insert bool, related *Currency) {
	if err := o.SetCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrencyGP of the income to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Incomes.
// Uses the global database handle and panics on error.
func (o *Income) SetCurrencyGP(insert bool, related *Currency) {
	if err := o.SetCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrency of the income to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Incomes.
func (o *Income) SetCurrency(exec boil.Executor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"income\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, incomePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CategoryID, o.DateTime, o.Title}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID

	if o.R == nil {
		o.R = &incomeR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			Incomes: IncomeSlice{o},
		}
	} else {
		related.R.Incomes = append(related.R.Incomes, o)
	}

	return nil
}

// IncomesG retrieves all records.
func IncomesG(mods ...qm.QueryMod) incomeQuery {
	return Incomes(boil.GetDB(), mods...)
}

// Incomes retrieves all the records using an executor.
func Incomes(exec boil.Executor, mods ...qm.QueryMod) incomeQuery {
	mods = append(mods, qm.From("\"income\""))
	return incomeQuery{NewQuery(exec, mods...)}
}

// FindIncomeG retrieves a single record by ID.
func FindIncomeG(userID int, categoryID int, dateTime time.Time, title string, selectCols ...string) (*Income, error) {
	return FindIncome(boil.GetDB(), userID, categoryID, dateTime, title, selectCols...)
}

// FindIncomeGP retrieves a single record by ID, and panics on error.
func FindIncomeGP(userID int, categoryID int, dateTime time.Time, title string, selectCols ...string) *Income {
	retobj, err := FindIncome(boil.GetDB(), userID, categoryID, dateTime, title, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindIncome retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncome(exec boil.Executor, userID int, categoryID int, dateTime time.Time, title string, selectCols ...string) (*Income, error) {
	incomeObj := &Income{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"income\" where \"user_id\"=$1 AND \"category_id\"=$2 AND \"date_time\"=$3 AND \"title\"=$4", sel,
	)

	q := queries.Raw(exec, query, userID, categoryID, dateTime, title)

	err := q.Bind(incomeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from income")
	}

	return incomeObj, nil
}

// FindIncomeP retrieves a single record by ID with an executor, and panics on error.
func FindIncomeP(exec boil.Executor, userID int, categoryID int, dateTime time.Time, title string, selectCols ...string) *Income {
	retobj, err := FindIncome(exec, userID, categoryID, dateTime, title, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Income) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Income) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Income) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Income) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no income provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	incomeInsertCacheMut.RLock()
	cache, cached := incomeInsertCache[key]
	incomeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			incomeColumns,
			incomeColumnsWithDefault,
			incomeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(incomeType, incomeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incomeType, incomeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"income\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"income\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into income")
	}

	if !cached {
		incomeInsertCacheMut.Lock()
		incomeInsertCache[key] = cache
		incomeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Income record. See Update for
// whitelist behavior description.
func (o *Income) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Income record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Income) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Income, and panics on error.
// See Update for whitelist behavior description.
func (o *Income) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Income.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Income) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	incomeUpdateCacheMut.RLock()
	cache, cached := incomeUpdateCache[key]
	incomeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			incomeColumns,
			incomePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update income, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"income\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, incomePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incomeType, incomeMapping, append(wl, incomePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update income row")
	}

	if !cached {
		incomeUpdateCacheMut.Lock()
		incomeUpdateCache[key] = cache
		incomeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q incomeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q incomeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for income")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IncomeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o IncomeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o IncomeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncomeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"income\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, incomePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in income slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Income) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Income) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Income) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Income) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no income provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incomeUpsertCacheMut.RLock()
	cache, cached := incomeUpsertCache[key]
	incomeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			incomeColumns,
			incomeColumnsWithDefault,
			incomeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			incomeColumns,
			incomePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert income, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(incomePrimaryKeyColumns))
			copy(conflict, incomePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"income\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(incomeType, incomeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incomeType, incomeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert income")
	}

	if !cached {
		incomeUpsertCacheMut.Lock()
		incomeUpsertCache[key] = cache
		incomeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Income record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Income) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Income record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Income) DeleteG() error {
	if o == nil {
		return errors.New("models: no Income provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Income record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Income) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Income record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Income) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Income provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incomePrimaryKeyMapping)
	sql := "DELETE FROM \"income\" WHERE \"user_id\"=$1 AND \"category_id\"=$2 AND \"date_time\"=$3 AND \"title\"=$4"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from income")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q incomeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q incomeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no incomeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from income")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o IncomeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o IncomeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Income slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o IncomeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncomeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Income slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(incomeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"income\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from income slice")
	}

	if len(incomeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Income) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Income) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Income) ReloadG() error {
	if o == nil {
		return errors.New("models: no Income provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Income) Reload(exec boil.Executor) error {
	ret, err := FindIncome(exec, o.UserID, o.CategoryID, o.DateTime, o.Title)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *IncomeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *IncomeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IncomeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	incomes := IncomeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"income\".* FROM \"income\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&incomes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncomeSlice")
	}

	*o = incomes

	return nil
}

// IncomeExists checks if the Income row exists.
func IncomeExists(exec boil.Executor, userID int, categoryID int, dateTime time.Time, title string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"income\" where \"user_id\"=$1 AND \"category_id\"=$2 AND \"date_time\"=$3 AND \"title\"=$4 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID, categoryID, dateTime, title)
	}

	row := exec.QueryRow(sql, userID, categoryID, dateTime, title)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if income exists")
	}

	return exists, nil
}

// IncomeExistsG checks if the Income row exists.
func IncomeExistsG(userID int, categoryID int, dateTime time.Time, title string) (bool, error) {
	return IncomeExists(boil.GetDB(), userID, categoryID, dateTime, title)
}

// IncomeExistsGP checks if the Income row exists. Panics on error.
func IncomeExistsGP(userID int, categoryID int, dateTime time.Time, title string) bool {
	e, err := IncomeExists(boil.GetDB(), userID, categoryID, dateTime, title)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// IncomeExistsP checks if the Income row exists. Panics on error.
func IncomeExistsP(exec boil.Executor, userID int, categoryID int, dateTime time.Time, title string) bool {
	e, err := IncomeExists(exec, userID, categoryID, dateTime, title)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
