// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testExpenses(t *testing.T) {
	t.Parallel()

	query := Expenses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testExpensesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = expense.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpensesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Expenses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExpensesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExpenseSlice{expense}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testExpensesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ExpenseExists(tx, expense.UserID, expense.CategoryID, expense.DateTime, expense.Title)
	if err != nil {
		t.Errorf("Unable to check if Expense exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExpenseExistsG to return true, but got false.")
	}
}
func testExpensesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	expenseFound, err := FindExpense(tx, expense.UserID, expense.CategoryID, expense.DateTime, expense.Title)
	if err != nil {
		t.Error(err)
	}

	if expenseFound == nil {
		t.Error("want a record, got nil")
	}
}
func testExpensesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Expenses(tx).Bind(expense); err != nil {
		t.Error(err)
	}
}

func testExpensesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Expenses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExpensesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expenseOne := &Expense{}
	expenseTwo := &Expense{}
	if err = randomize.Struct(seed, expenseOne, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTwo, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expenseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = expenseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Expenses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExpensesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	expenseOne := &Expense{}
	expenseTwo := &Expense{}
	if err = randomize.Struct(seed, expenseOne, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err = randomize.Struct(seed, expenseTwo, expenseDBTypes, false, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expenseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = expenseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func expenseBeforeInsertHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterInsertHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterSelectHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeUpdateHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterUpdateHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeDeleteHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterDeleteHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseBeforeUpsertHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func expenseAfterUpsertHook(e boil.Executor, o *Expense) error {
	*o = Expense{}
	return nil
}

func testExpensesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Expense{}
	o := &Expense{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, expenseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Expense object: %s", err)
	}

	AddExpenseHook(boil.BeforeInsertHook, expenseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	expenseBeforeInsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterInsertHook, expenseAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	expenseAfterInsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterSelectHook, expenseAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	expenseAfterSelectHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeUpdateHook, expenseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	expenseBeforeUpdateHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterUpdateHook, expenseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	expenseAfterUpdateHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeDeleteHook, expenseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	expenseBeforeDeleteHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterDeleteHook, expenseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	expenseAfterDeleteHooks = []ExpenseHook{}

	AddExpenseHook(boil.BeforeUpsertHook, expenseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	expenseBeforeUpsertHooks = []ExpenseHook{}

	AddExpenseHook(boil.AfterUpsertHook, expenseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	expenseAfterUpsertHooks = []ExpenseHook{}
}
func testExpensesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpensesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx, expenseColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExpenseToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Expense
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExpenseSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Expense)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExpenseToOneExpenseCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Expense
	var foreign ExpenseCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, expenseCategoryDBTypes, true, expenseCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExpenseCategory struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExpenseSlice{&local}
	if err = local.L.LoadCategory(tx, false, (*[]*Expense)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExpenseToOneCurrencyUsingCurrency(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Expense
	var foreign Currency

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CurrencyID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Currency(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExpenseSlice{&local}
	if err = local.L.LoadCurrency(tx, false, (*[]*Expense)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Currency = nil
	if err = local.L.LoadCurrency(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExpenseToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Expense
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, expenseDBTypes, false, strmangle.SetComplement(expensePrimaryKeyColumns, expenseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Expenses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := ExpenseExists(tx, a.UserID, a.CategoryID, a.DateTime, a.Title); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testExpenseToOneSetOpExpenseCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Expense
	var b, c ExpenseCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, expenseDBTypes, false, strmangle.SetComplement(expensePrimaryKeyColumns, expenseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, expenseCategoryDBTypes, false, strmangle.SetComplement(expenseCategoryPrimaryKeyColumns, expenseCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, expenseCategoryDBTypes, false, strmangle.SetComplement(expenseCategoryPrimaryKeyColumns, expenseCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ExpenseCategory{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryExpenses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		if exists, err := ExpenseExists(tx, a.UserID, a.CategoryID, a.DateTime, a.Title); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testExpenseToOneSetOpCurrencyUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Expense
	var b, c Currency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, expenseDBTypes, false, strmangle.SetComplement(expensePrimaryKeyColumns, expenseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Currency{&b, &c} {
		err = a.SetCurrency(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Currency != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Expenses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CurrencyID != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrencyID))
		reflect.Indirect(reflect.ValueOf(&a.CurrencyID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CurrencyID != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID, x.ID)
		}
	}
}
func testExpensesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = expense.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testExpensesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExpenseSlice{expense}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testExpensesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Expenses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	expenseDBTypes = map[string]string{`CategoryID`: `integer`, `CurrencyID`: `integer`, `DateTime`: `timestamp with time zone`, `ID`: `integer`, `Rate`: `numeric`, `Reference`: `character varying`, `Title`: `character varying`, `UserID`: `integer`, `Value`: `numeric`}
	_              = bytes.MinRead
)

func testExpensesUpdate(t *testing.T) {
	t.Parallel()

	if len(expenseColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	if err = expense.Update(tx); err != nil {
		t.Error(err)
	}
}

func testExpensesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(expenseColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	expense := &Expense{}
	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expenseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, expense, expenseDBTypes, true, expensePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(expenseColumns, expensePrimaryKeyColumns) {
		fields = expenseColumns
	} else {
		fields = strmangle.SetComplement(
			expenseColumns,
			expensePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(expense))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ExpenseSlice{expense}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testExpensesUpsert(t *testing.T) {
	t.Parallel()

	if len(expenseColumns) == len(expensePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	expense := Expense{}
	if err = randomize.Struct(seed, &expense, expenseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = expense.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Expense: %s", err)
	}

	count, err := Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &expense, expenseDBTypes, false, expensePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Expense struct: %s", err)
	}

	if err = expense.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Expense: %s", err)
	}

	count, err = Expenses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
