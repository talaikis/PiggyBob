// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testIncomes(t *testing.T) {
	t.Parallel()

	query := Incomes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testIncomesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = income.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Incomes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := IncomeSlice{income}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testIncomesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := IncomeExists(tx, income.UserID, income.CategoryID, income.DateTime, income.Title)
	if err != nil {
		t.Errorf("Unable to check if Income exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IncomeExistsG to return true, but got false.")
	}
}
func testIncomesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	incomeFound, err := FindIncome(tx, income.UserID, income.CategoryID, income.DateTime, income.Title)
	if err != nil {
		t.Error(err)
	}

	if incomeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testIncomesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Incomes(tx).Bind(income); err != nil {
		t.Error(err)
	}
}

func testIncomesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Incomes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIncomesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeOne := &Income{}
	incomeTwo := &Income{}
	if err = randomize.Struct(seed, incomeOne, incomeDBTypes, false, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeTwo, incomeDBTypes, false, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = incomeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Incomes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIncomesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	incomeOne := &Income{}
	incomeTwo := &Income{}
	if err = randomize.Struct(seed, incomeOne, incomeDBTypes, false, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeTwo, incomeDBTypes, false, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = incomeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func incomeBeforeInsertHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeAfterInsertHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeAfterSelectHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeBeforeUpdateHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeAfterUpdateHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeBeforeDeleteHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeAfterDeleteHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeBeforeUpsertHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func incomeAfterUpsertHook(e boil.Executor, o *Income) error {
	*o = Income{}
	return nil
}

func testIncomesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Income{}
	o := &Income{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, incomeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Income object: %s", err)
	}

	AddIncomeHook(boil.BeforeInsertHook, incomeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	incomeBeforeInsertHooks = []IncomeHook{}

	AddIncomeHook(boil.AfterInsertHook, incomeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	incomeAfterInsertHooks = []IncomeHook{}

	AddIncomeHook(boil.AfterSelectHook, incomeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	incomeAfterSelectHooks = []IncomeHook{}

	AddIncomeHook(boil.BeforeUpdateHook, incomeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	incomeBeforeUpdateHooks = []IncomeHook{}

	AddIncomeHook(boil.AfterUpdateHook, incomeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	incomeAfterUpdateHooks = []IncomeHook{}

	AddIncomeHook(boil.BeforeDeleteHook, incomeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	incomeBeforeDeleteHooks = []IncomeHook{}

	AddIncomeHook(boil.AfterDeleteHook, incomeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	incomeAfterDeleteHooks = []IncomeHook{}

	AddIncomeHook(boil.BeforeUpsertHook, incomeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	incomeBeforeUpsertHooks = []IncomeHook{}

	AddIncomeHook(boil.AfterUpsertHook, incomeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	incomeAfterUpsertHooks = []IncomeHook{}
}
func testIncomesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx, incomeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomeToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Income
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncomeSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Income)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncomeToOneIncomeCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Income
	var foreign IncomeCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncomeSlice{&local}
	if err = local.L.LoadCategory(tx, false, (*[]*Income)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncomeToOneCurrencyUsingCurrency(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Income
	var foreign Currency

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CurrencyID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Currency(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IncomeSlice{&local}
	if err = local.L.LoadCurrency(tx, false, (*[]*Income)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Currency = nil
	if err = local.L.LoadCurrency(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIncomeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Income
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeDBTypes, false, strmangle.SetComplement(incomePrimaryKeyColumns, incomeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Incomes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := IncomeExists(tx, a.UserID, a.CategoryID, a.DateTime, a.Title); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testIncomeToOneSetOpIncomeCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Income
	var b, c IncomeCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeDBTypes, false, strmangle.SetComplement(incomePrimaryKeyColumns, incomeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, incomeCategoryDBTypes, false, strmangle.SetComplement(incomeCategoryPrimaryKeyColumns, incomeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, incomeCategoryDBTypes, false, strmangle.SetComplement(incomeCategoryPrimaryKeyColumns, incomeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IncomeCategory{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryIncomes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		if exists, err := IncomeExists(tx, a.UserID, a.CategoryID, a.DateTime, a.Title); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testIncomeToOneSetOpCurrencyUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Income
	var b, c Currency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeDBTypes, false, strmangle.SetComplement(incomePrimaryKeyColumns, incomeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Currency{&b, &c} {
		err = a.SetCurrency(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Currency != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Incomes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CurrencyID != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrencyID))
		reflect.Indirect(reflect.ValueOf(&a.CurrencyID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CurrencyID != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID, x.ID)
		}
	}
}
func testIncomesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = income.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testIncomesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := IncomeSlice{income}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testIncomesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Incomes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	incomeDBTypes = map[string]string{`CategoryID`: `integer`, `CurrencyID`: `integer`, `DateTime`: `timestamp with time zone`, `ID`: `integer`, `Rate`: `numeric`, `Reference`: `character varying`, `Title`: `character varying`, `UserID`: `integer`, `Value`: `numeric`}
	_             = bytes.MinRead
)

func testIncomesUpdate(t *testing.T) {
	t.Parallel()

	if len(incomeColumns) == len(incomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	if err = income.Update(tx); err != nil {
		t.Error(err)
	}
}

func testIncomesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(incomeColumns) == len(incomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	income := &Income{}
	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, income, incomeDBTypes, true, incomePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(incomeColumns, incomePrimaryKeyColumns) {
		fields = incomeColumns
	} else {
		fields = strmangle.SetComplement(
			incomeColumns,
			incomePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(income))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := IncomeSlice{income}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testIncomesUpsert(t *testing.T) {
	t.Parallel()

	if len(incomeColumns) == len(incomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	income := Income{}
	if err = randomize.Struct(seed, &income, incomeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = income.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Income: %s", err)
	}

	count, err := Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &income, incomeDBTypes, false, incomePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Income struct: %s", err)
	}

	if err = income.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Income: %s", err)
	}

	count, err = Incomes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
