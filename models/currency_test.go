// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCurrencies(t *testing.T) {
	t.Parallel()

	query := Currencies(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCurrenciesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = currency.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrenciesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Currencies(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrenciesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CurrencySlice{currency}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCurrenciesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CurrencyExists(tx, currency.ID)
	if err != nil {
		t.Errorf("Unable to check if Currency exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CurrencyExistsG to return true, but got false.")
	}
}
func testCurrenciesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	currencyFound, err := FindCurrency(tx, currency.ID)
	if err != nil {
		t.Error(err)
	}

	if currencyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCurrenciesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Currencies(tx).Bind(currency); err != nil {
		t.Error(err)
	}
}

func testCurrenciesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Currencies(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCurrenciesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyOne := &Currency{}
	currencyTwo := &Currency{}
	if err = randomize.Struct(seed, currencyOne, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyTwo, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = currencyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Currencies(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCurrenciesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	currencyOne := &Currency{}
	currencyTwo := &Currency{}
	if err = randomize.Struct(seed, currencyOne, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyTwo, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = currencyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func currencyBeforeInsertHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterInsertHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterSelectHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeUpdateHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterUpdateHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeDeleteHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterDeleteHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyBeforeUpsertHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func currencyAfterUpsertHook(e boil.Executor, o *Currency) error {
	*o = Currency{}
	return nil
}

func testCurrenciesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Currency{}
	o := &Currency{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, currencyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Currency object: %s", err)
	}

	AddCurrencyHook(boil.BeforeInsertHook, currencyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	currencyBeforeInsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterInsertHook, currencyAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	currencyAfterInsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterSelectHook, currencyAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	currencyAfterSelectHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeUpdateHook, currencyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	currencyBeforeUpdateHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterUpdateHook, currencyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	currencyAfterUpdateHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeDeleteHook, currencyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	currencyBeforeDeleteHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterDeleteHook, currencyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	currencyAfterDeleteHooks = []CurrencyHook{}

	AddCurrencyHook(boil.BeforeUpsertHook, currencyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	currencyBeforeUpsertHooks = []CurrencyHook{}

	AddCurrencyHook(boil.AfterUpsertHook, currencyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	currencyAfterUpsertHooks = []CurrencyHook{}
}
func testCurrenciesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrenciesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx, currencyColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrencyToManyExpenses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Currency
	var b, c Expense

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, expenseDBTypes, false, expenseColumnsWithDefault...)
	randomize.Struct(seed, &c, expenseDBTypes, false, expenseColumnsWithDefault...)

	b.CurrencyID = a.ID
	c.CurrencyID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	expense, err := a.Expenses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range expense {
		if v.CurrencyID == b.CurrencyID {
			bFound = true
		}
		if v.CurrencyID == c.CurrencyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CurrencySlice{&a}
	if err = a.L.LoadExpenses(tx, false, (*[]*Currency)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Expenses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Expenses = nil
	if err = a.L.LoadExpenses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Expenses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", expense)
	}
}

func testCurrencyToManyIncomes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Currency
	var b, c Income

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, incomeDBTypes, false, incomeColumnsWithDefault...)
	randomize.Struct(seed, &c, incomeDBTypes, false, incomeColumnsWithDefault...)

	b.CurrencyID = a.ID
	c.CurrencyID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	income, err := a.Incomes(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range income {
		if v.CurrencyID == b.CurrencyID {
			bFound = true
		}
		if v.CurrencyID == c.CurrencyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CurrencySlice{&a}
	if err = a.L.LoadIncomes(tx, false, (*[]*Currency)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Incomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Incomes = nil
	if err = a.L.LoadIncomes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Incomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", income)
	}
}

func testCurrencyToManyAddOpExpenses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Currency
	var b, c, d, e Expense

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Expense{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, expenseDBTypes, false, strmangle.SetComplement(expensePrimaryKeyColumns, expenseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Expense{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExpenses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CurrencyID {
			t.Error("foreign key was wrong value", a.ID, first.CurrencyID)
		}
		if a.ID != second.CurrencyID {
			t.Error("foreign key was wrong value", a.ID, second.CurrencyID)
		}

		if first.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Expenses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Expenses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Expenses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCurrencyToManyAddOpIncomes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Currency
	var b, c, d, e Income

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Income{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incomeDBTypes, false, strmangle.SetComplement(incomePrimaryKeyColumns, incomeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Income{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIncomes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CurrencyID {
			t.Error("foreign key was wrong value", a.ID, first.CurrencyID)
		}
		if a.ID != second.CurrencyID {
			t.Error("foreign key was wrong value", a.ID, second.CurrencyID)
		}

		if first.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Incomes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Incomes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Incomes(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCurrenciesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = currency.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCurrenciesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CurrencySlice{currency}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCurrenciesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Currencies(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	currencyDBTypes = map[string]string{`Description`: `character varying`, `ID`: `integer`, `Title`: `character varying`}
	_               = bytes.MinRead
)

func testCurrenciesUpdate(t *testing.T) {
	t.Parallel()

	if len(currencyColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err = currency.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCurrenciesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(currencyColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	currency := &Currency{}
	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, currency, currencyDBTypes, true, currencyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(currencyColumns, currencyPrimaryKeyColumns) {
		fields = currencyColumns
	} else {
		fields = strmangle.SetComplement(
			currencyColumns,
			currencyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(currency))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CurrencySlice{currency}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCurrenciesUpsert(t *testing.T) {
	t.Parallel()

	if len(currencyColumns) == len(currencyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	currency := Currency{}
	if err = randomize.Struct(seed, &currency, currencyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currency.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Currency: %s", err)
	}

	count, err := Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &currency, currencyDBTypes, false, currencyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err = currency.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Currency: %s", err)
	}

	count, err = Currencies(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
