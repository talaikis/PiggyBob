// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// IncomeCategory is an object representing the database table.
type IncomeCategory struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *incomeCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incomeCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// incomeCategoryR is where relationships are stored.
type incomeCategoryR struct {
	CategoryIncomes IncomeSlice
}

// incomeCategoryL is where Load methods for each relationship are stored.
type incomeCategoryL struct{}

var (
	incomeCategoryColumns               = []string{"id", "title", "description"}
	incomeCategoryColumnsWithoutDefault = []string{"title", "description"}
	incomeCategoryColumnsWithDefault    = []string{"id"}
	incomeCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// IncomeCategorySlice is an alias for a slice of pointers to IncomeCategory.
	// This should generally be used opposed to []IncomeCategory.
	IncomeCategorySlice []*IncomeCategory
	// IncomeCategoryHook is the signature for custom IncomeCategory hook methods
	IncomeCategoryHook func(boil.Executor, *IncomeCategory) error

	incomeCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incomeCategoryType                 = reflect.TypeOf(&IncomeCategory{})
	incomeCategoryMapping              = queries.MakeStructMapping(incomeCategoryType)
	incomeCategoryPrimaryKeyMapping, _ = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, incomeCategoryPrimaryKeyColumns)
	incomeCategoryInsertCacheMut       sync.RWMutex
	incomeCategoryInsertCache          = make(map[string]insertCache)
	incomeCategoryUpdateCacheMut       sync.RWMutex
	incomeCategoryUpdateCache          = make(map[string]updateCache)
	incomeCategoryUpsertCacheMut       sync.RWMutex
	incomeCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var incomeCategoryBeforeInsertHooks []IncomeCategoryHook
var incomeCategoryBeforeUpdateHooks []IncomeCategoryHook
var incomeCategoryBeforeDeleteHooks []IncomeCategoryHook
var incomeCategoryBeforeUpsertHooks []IncomeCategoryHook

var incomeCategoryAfterInsertHooks []IncomeCategoryHook
var incomeCategoryAfterSelectHooks []IncomeCategoryHook
var incomeCategoryAfterUpdateHooks []IncomeCategoryHook
var incomeCategoryAfterDeleteHooks []IncomeCategoryHook
var incomeCategoryAfterUpsertHooks []IncomeCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IncomeCategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IncomeCategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IncomeCategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IncomeCategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IncomeCategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IncomeCategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IncomeCategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IncomeCategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IncomeCategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomeCategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIncomeCategoryHook registers your hook function for all future operations.
func AddIncomeCategoryHook(hookPoint boil.HookPoint, incomeCategoryHook IncomeCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		incomeCategoryBeforeInsertHooks = append(incomeCategoryBeforeInsertHooks, incomeCategoryHook)
	case boil.BeforeUpdateHook:
		incomeCategoryBeforeUpdateHooks = append(incomeCategoryBeforeUpdateHooks, incomeCategoryHook)
	case boil.BeforeDeleteHook:
		incomeCategoryBeforeDeleteHooks = append(incomeCategoryBeforeDeleteHooks, incomeCategoryHook)
	case boil.BeforeUpsertHook:
		incomeCategoryBeforeUpsertHooks = append(incomeCategoryBeforeUpsertHooks, incomeCategoryHook)
	case boil.AfterInsertHook:
		incomeCategoryAfterInsertHooks = append(incomeCategoryAfterInsertHooks, incomeCategoryHook)
	case boil.AfterSelectHook:
		incomeCategoryAfterSelectHooks = append(incomeCategoryAfterSelectHooks, incomeCategoryHook)
	case boil.AfterUpdateHook:
		incomeCategoryAfterUpdateHooks = append(incomeCategoryAfterUpdateHooks, incomeCategoryHook)
	case boil.AfterDeleteHook:
		incomeCategoryAfterDeleteHooks = append(incomeCategoryAfterDeleteHooks, incomeCategoryHook)
	case boil.AfterUpsertHook:
		incomeCategoryAfterUpsertHooks = append(incomeCategoryAfterUpsertHooks, incomeCategoryHook)
	}
}

// OneP returns a single incomeCategory record from the query, and panics on error.
func (q incomeCategoryQuery) OneP() *IncomeCategory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single incomeCategory record from the query.
func (q incomeCategoryQuery) One() (*IncomeCategory, error) {
	o := &IncomeCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for income_category")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all IncomeCategory records from the query, and panics on error.
func (q incomeCategoryQuery) AllP() IncomeCategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all IncomeCategory records from the query.
func (q incomeCategoryQuery) All() (IncomeCategorySlice, error) {
	var o []*IncomeCategory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IncomeCategory slice")
	}

	if len(incomeCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all IncomeCategory records in the query, and panics on error.
func (q incomeCategoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all IncomeCategory records in the query.
func (q incomeCategoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count income_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q incomeCategoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q incomeCategoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if income_category exists")
	}

	return count > 0, nil
}

// CategoryIncomesG retrieves all the income's income via category_id column.
func (o *IncomeCategory) CategoryIncomesG(mods ...qm.QueryMod) incomeQuery {
	return o.CategoryIncomes(boil.GetDB(), mods...)
}

// CategoryIncomes retrieves all the income's income with an executor via category_id column.
func (o *IncomeCategory) CategoryIncomes(exec boil.Executor, mods ...qm.QueryMod) incomeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"category_id\"=?", o.ID),
	)

	query := Incomes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"income\" as \"a\"")
	return query
}

// LoadCategoryIncomes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (incomeCategoryL) LoadCategoryIncomes(e boil.Executor, singular bool, maybeIncomeCategory interface{}) error {
	var slice []*IncomeCategory
	var object *IncomeCategory

	count := 1
	if singular {
		object = maybeIncomeCategory.(*IncomeCategory)
	} else {
		slice = *maybeIncomeCategory.(*[]*IncomeCategory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &incomeCategoryR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeCategoryR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"income\" where \"category_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load income")
	}
	defer results.Close()

	var resultSlice []*Income
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice income")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryIncomes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryIncomes = append(local.R.CategoryIncomes, foreign)
				break
			}
		}
	}

	return nil
}

// AddCategoryIncomesG adds the given related objects to the existing relationships
// of the income_category, optionally inserting them as new records.
// Appends related to o.R.CategoryIncomes.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *IncomeCategory) AddCategoryIncomesG(insert bool, related ...*Income) error {
	return o.AddCategoryIncomes(boil.GetDB(), insert, related...)
}

// AddCategoryIncomesP adds the given related objects to the existing relationships
// of the income_category, optionally inserting them as new records.
// Appends related to o.R.CategoryIncomes.
// Sets related.R.Category appropriately.
// Panics on error.
func (o *IncomeCategory) AddCategoryIncomesP(exec boil.Executor, insert bool, related ...*Income) {
	if err := o.AddCategoryIncomes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryIncomesGP adds the given related objects to the existing relationships
// of the income_category, optionally inserting them as new records.
// Appends related to o.R.CategoryIncomes.
// Sets related.R.Category appropriately.
// Uses the global database handle and panics on error.
func (o *IncomeCategory) AddCategoryIncomesGP(insert bool, related ...*Income) {
	if err := o.AddCategoryIncomes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryIncomes adds the given related objects to the existing relationships
// of the income_category, optionally inserting them as new records.
// Appends related to o.R.CategoryIncomes.
// Sets related.R.Category appropriately.
func (o *IncomeCategory) AddCategoryIncomes(exec boil.Executor, insert bool, related ...*Income) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"income\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, incomePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.CategoryID, rel.DateTime, rel.Title}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &incomeCategoryR{
			CategoryIncomes: related,
		}
	} else {
		o.R.CategoryIncomes = append(o.R.CategoryIncomes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incomeR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// IncomeCategoriesG retrieves all records.
func IncomeCategoriesG(mods ...qm.QueryMod) incomeCategoryQuery {
	return IncomeCategories(boil.GetDB(), mods...)
}

// IncomeCategories retrieves all the records using an executor.
func IncomeCategories(exec boil.Executor, mods ...qm.QueryMod) incomeCategoryQuery {
	mods = append(mods, qm.From("\"income_category\""))
	return incomeCategoryQuery{NewQuery(exec, mods...)}
}

// FindIncomeCategoryG retrieves a single record by ID.
func FindIncomeCategoryG(id int, selectCols ...string) (*IncomeCategory, error) {
	return FindIncomeCategory(boil.GetDB(), id, selectCols...)
}

// FindIncomeCategoryGP retrieves a single record by ID, and panics on error.
func FindIncomeCategoryGP(id int, selectCols ...string) *IncomeCategory {
	retobj, err := FindIncomeCategory(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindIncomeCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncomeCategory(exec boil.Executor, id int, selectCols ...string) (*IncomeCategory, error) {
	incomeCategoryObj := &IncomeCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"income_category\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(incomeCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from income_category")
	}

	return incomeCategoryObj, nil
}

// FindIncomeCategoryP retrieves a single record by ID with an executor, and panics on error.
func FindIncomeCategoryP(exec boil.Executor, id int, selectCols ...string) *IncomeCategory {
	retobj, err := FindIncomeCategory(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IncomeCategory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *IncomeCategory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *IncomeCategory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *IncomeCategory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no income_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeCategoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	incomeCategoryInsertCacheMut.RLock()
	cache, cached := incomeCategoryInsertCache[key]
	incomeCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			incomeCategoryColumns,
			incomeCategoryColumnsWithDefault,
			incomeCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"income_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"income_category\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into income_category")
	}

	if !cached {
		incomeCategoryInsertCacheMut.Lock()
		incomeCategoryInsertCache[key] = cache
		incomeCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IncomeCategory record. See Update for
// whitelist behavior description.
func (o *IncomeCategory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single IncomeCategory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *IncomeCategory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the IncomeCategory, and panics on error.
// See Update for whitelist behavior description.
func (o *IncomeCategory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the IncomeCategory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *IncomeCategory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	incomeCategoryUpdateCacheMut.RLock()
	cache, cached := incomeCategoryUpdateCache[key]
	incomeCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			incomeCategoryColumns,
			incomeCategoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update income_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"income_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, incomeCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, append(wl, incomeCategoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update income_category row")
	}

	if !cached {
		incomeCategoryUpdateCacheMut.Lock()
		incomeCategoryUpdateCache[key] = cache
		incomeCategoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q incomeCategoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q incomeCategoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for income_category")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IncomeCategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o IncomeCategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o IncomeCategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncomeCategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"income_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, incomeCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in incomeCategory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IncomeCategory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *IncomeCategory) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *IncomeCategory) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *IncomeCategory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no income_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incomeCategoryUpsertCacheMut.RLock()
	cache, cached := incomeCategoryUpsertCache[key]
	incomeCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			incomeCategoryColumns,
			incomeCategoryColumnsWithDefault,
			incomeCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			incomeCategoryColumns,
			incomeCategoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert income_category, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(incomeCategoryPrimaryKeyColumns))
			copy(conflict, incomeCategoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"income_category\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incomeCategoryType, incomeCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert income_category")
	}

	if !cached {
		incomeCategoryUpsertCacheMut.Lock()
		incomeCategoryUpsertCache[key] = cache
		incomeCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single IncomeCategory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *IncomeCategory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single IncomeCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IncomeCategory) DeleteG() error {
	if o == nil {
		return errors.New("models: no IncomeCategory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single IncomeCategory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *IncomeCategory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single IncomeCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IncomeCategory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no IncomeCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incomeCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"income_category\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from income_category")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q incomeCategoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q incomeCategoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no incomeCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from income_category")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o IncomeCategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o IncomeCategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no IncomeCategory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o IncomeCategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncomeCategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no IncomeCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(incomeCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"income_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomeCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from incomeCategory slice")
	}

	if len(incomeCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *IncomeCategory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *IncomeCategory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IncomeCategory) ReloadG() error {
	if o == nil {
		return errors.New("models: no IncomeCategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IncomeCategory) Reload(exec boil.Executor) error {
	ret, err := FindIncomeCategory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *IncomeCategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *IncomeCategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomeCategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IncomeCategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomeCategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	incomeCategories := IncomeCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"income_category\".* FROM \"income_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomeCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&incomeCategories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncomeCategorySlice")
	}

	*o = incomeCategories

	return nil
}

// IncomeCategoryExists checks if the IncomeCategory row exists.
func IncomeCategoryExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"income_category\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if income_category exists")
	}

	return exists, nil
}

// IncomeCategoryExistsG checks if the IncomeCategory row exists.
func IncomeCategoryExistsG(id int) (bool, error) {
	return IncomeCategoryExists(boil.GetDB(), id)
}

// IncomeCategoryExistsGP checks if the IncomeCategory row exists. Panics on error.
func IncomeCategoryExistsGP(id int) bool {
	e, err := IncomeCategoryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// IncomeCategoryExistsP checks if the IncomeCategory row exists. Panics on error.
func IncomeCategoryExistsP(exec boil.Executor, id int) bool {
	e, err := IncomeCategoryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
