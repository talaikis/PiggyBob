// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testIncomeCategories(t *testing.T) {
	t.Parallel()

	query := IncomeCategories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testIncomeCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = incomeCategory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomeCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = IncomeCategories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomeCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := IncomeCategorySlice{incomeCategory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testIncomeCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := IncomeCategoryExists(tx, incomeCategory.ID)
	if err != nil {
		t.Errorf("Unable to check if IncomeCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IncomeCategoryExistsG to return true, but got false.")
	}
}
func testIncomeCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	incomeCategoryFound, err := FindIncomeCategory(tx, incomeCategory.ID)
	if err != nil {
		t.Error(err)
	}

	if incomeCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testIncomeCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = IncomeCategories(tx).Bind(incomeCategory); err != nil {
		t.Error(err)
	}
}

func testIncomeCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := IncomeCategories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIncomeCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategoryOne := &IncomeCategory{}
	incomeCategoryTwo := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategoryOne, incomeCategoryDBTypes, false, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeCategoryTwo, incomeCategoryDBTypes, false, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = incomeCategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := IncomeCategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIncomeCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	incomeCategoryOne := &IncomeCategory{}
	incomeCategoryTwo := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategoryOne, incomeCategoryDBTypes, false, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeCategoryTwo, incomeCategoryDBTypes, false, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = incomeCategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func incomeCategoryBeforeInsertHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryAfterInsertHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryAfterSelectHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryBeforeUpdateHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryAfterUpdateHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryBeforeDeleteHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryAfterDeleteHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryBeforeUpsertHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func incomeCategoryAfterUpsertHook(e boil.Executor, o *IncomeCategory) error {
	*o = IncomeCategory{}
	return nil
}

func testIncomeCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &IncomeCategory{}
	o := &IncomeCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, incomeCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IncomeCategory object: %s", err)
	}

	AddIncomeCategoryHook(boil.BeforeInsertHook, incomeCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	incomeCategoryBeforeInsertHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.AfterInsertHook, incomeCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	incomeCategoryAfterInsertHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.AfterSelectHook, incomeCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	incomeCategoryAfterSelectHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.BeforeUpdateHook, incomeCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	incomeCategoryBeforeUpdateHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.AfterUpdateHook, incomeCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	incomeCategoryAfterUpdateHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.BeforeDeleteHook, incomeCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	incomeCategoryBeforeDeleteHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.AfterDeleteHook, incomeCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	incomeCategoryAfterDeleteHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.BeforeUpsertHook, incomeCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	incomeCategoryBeforeUpsertHooks = []IncomeCategoryHook{}

	AddIncomeCategoryHook(boil.AfterUpsertHook, incomeCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	incomeCategoryAfterUpsertHooks = []IncomeCategoryHook{}
}
func testIncomeCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomeCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx, incomeCategoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomeCategoryToManyCategoryIncomes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a IncomeCategory
	var b, c Income

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, incomeDBTypes, false, incomeColumnsWithDefault...)
	randomize.Struct(seed, &c, incomeDBTypes, false, incomeColumnsWithDefault...)

	b.CategoryID = a.ID
	c.CategoryID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	income, err := a.CategoryIncomes(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range income {
		if v.CategoryID == b.CategoryID {
			bFound = true
		}
		if v.CategoryID == c.CategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IncomeCategorySlice{&a}
	if err = a.L.LoadCategoryIncomes(tx, false, (*[]*IncomeCategory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryIncomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryIncomes = nil
	if err = a.L.LoadCategoryIncomes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryIncomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", income)
	}
}

func testIncomeCategoryToManyAddOpCategoryIncomes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a IncomeCategory
	var b, c, d, e Income

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeCategoryDBTypes, false, strmangle.SetComplement(incomeCategoryPrimaryKeyColumns, incomeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Income{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, incomeDBTypes, false, strmangle.SetComplement(incomePrimaryKeyColumns, incomeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Income{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryIncomes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CategoryID {
			t.Error("foreign key was wrong value", a.ID, first.CategoryID)
		}
		if a.ID != second.CategoryID {
			t.Error("foreign key was wrong value", a.ID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryIncomes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryIncomes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryIncomes(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIncomeCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = incomeCategory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testIncomeCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := IncomeCategorySlice{incomeCategory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testIncomeCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := IncomeCategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	incomeCategoryDBTypes = map[string]string{`Description`: `character varying`, `ID`: `integer`, `Title`: `character varying`}
	_                     = bytes.MinRead
)

func testIncomeCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(incomeCategoryColumns) == len(incomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	if err = incomeCategory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testIncomeCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(incomeCategoryColumns) == len(incomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	incomeCategory := &IncomeCategory{}
	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, incomeCategory, incomeCategoryDBTypes, true, incomeCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(incomeCategoryColumns, incomeCategoryPrimaryKeyColumns) {
		fields = incomeCategoryColumns
	} else {
		fields = strmangle.SetComplement(
			incomeCategoryColumns,
			incomeCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(incomeCategory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := IncomeCategorySlice{incomeCategory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testIncomeCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(incomeCategoryColumns) == len(incomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	incomeCategory := IncomeCategory{}
	if err = randomize.Struct(seed, &incomeCategory, incomeCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = incomeCategory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert IncomeCategory: %s", err)
	}

	count, err := IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &incomeCategory, incomeCategoryDBTypes, false, incomeCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncomeCategory struct: %s", err)
	}

	if err = incomeCategory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert IncomeCategory: %s", err)
	}

	count, err = IncomeCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
