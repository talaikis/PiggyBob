// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Currency is an object representing the database table.
type Currency struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *currencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// currencyR is where relationships are stored.
type currencyR struct {
	Expenses ExpenseSlice
	Incomes  IncomeSlice
}

// currencyL is where Load methods for each relationship are stored.
type currencyL struct{}

var (
	currencyColumns               = []string{"id", "title", "description"}
	currencyColumnsWithoutDefault = []string{"title", "description"}
	currencyColumnsWithDefault    = []string{"id"}
	currencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrencySlice is an alias for a slice of pointers to Currency.
	// This should generally be used opposed to []Currency.
	CurrencySlice []*Currency
	// CurrencyHook is the signature for custom Currency hook methods
	CurrencyHook func(boil.Executor, *Currency) error

	currencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyType                 = reflect.TypeOf(&Currency{})
	currencyMapping              = queries.MakeStructMapping(currencyType)
	currencyPrimaryKeyMapping, _ = queries.BindMapping(currencyType, currencyMapping, currencyPrimaryKeyColumns)
	currencyInsertCacheMut       sync.RWMutex
	currencyInsertCache          = make(map[string]insertCache)
	currencyUpdateCacheMut       sync.RWMutex
	currencyUpdateCache          = make(map[string]updateCache)
	currencyUpsertCacheMut       sync.RWMutex
	currencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var currencyBeforeInsertHooks []CurrencyHook
var currencyBeforeUpdateHooks []CurrencyHook
var currencyBeforeDeleteHooks []CurrencyHook
var currencyBeforeUpsertHooks []CurrencyHook

var currencyAfterInsertHooks []CurrencyHook
var currencyAfterSelectHooks []CurrencyHook
var currencyAfterUpdateHooks []CurrencyHook
var currencyAfterDeleteHooks []CurrencyHook
var currencyAfterUpsertHooks []CurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Currency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Currency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Currency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Currency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Currency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Currency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Currency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Currency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Currency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyHook registers your hook function for all future operations.
func AddCurrencyHook(hookPoint boil.HookPoint, currencyHook CurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currencyBeforeInsertHooks = append(currencyBeforeInsertHooks, currencyHook)
	case boil.BeforeUpdateHook:
		currencyBeforeUpdateHooks = append(currencyBeforeUpdateHooks, currencyHook)
	case boil.BeforeDeleteHook:
		currencyBeforeDeleteHooks = append(currencyBeforeDeleteHooks, currencyHook)
	case boil.BeforeUpsertHook:
		currencyBeforeUpsertHooks = append(currencyBeforeUpsertHooks, currencyHook)
	case boil.AfterInsertHook:
		currencyAfterInsertHooks = append(currencyAfterInsertHooks, currencyHook)
	case boil.AfterSelectHook:
		currencyAfterSelectHooks = append(currencyAfterSelectHooks, currencyHook)
	case boil.AfterUpdateHook:
		currencyAfterUpdateHooks = append(currencyAfterUpdateHooks, currencyHook)
	case boil.AfterDeleteHook:
		currencyAfterDeleteHooks = append(currencyAfterDeleteHooks, currencyHook)
	case boil.AfterUpsertHook:
		currencyAfterUpsertHooks = append(currencyAfterUpsertHooks, currencyHook)
	}
}

// OneP returns a single currency record from the query, and panics on error.
func (q currencyQuery) OneP() *Currency {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single currency record from the query.
func (q currencyQuery) One() (*Currency, error) {
	o := &Currency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for currency")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Currency records from the query, and panics on error.
func (q currencyQuery) AllP() CurrencySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Currency records from the query.
func (q currencyQuery) All() (CurrencySlice, error) {
	var o []*Currency

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Currency slice")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Currency records in the query, and panics on error.
func (q currencyQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Currency records in the query.
func (q currencyQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count currency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q currencyQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q currencyQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if currency exists")
	}

	return count > 0, nil
}

// ExpensesG retrieves all the expense's expense.
func (o *Currency) ExpensesG(mods ...qm.QueryMod) expenseQuery {
	return o.Expenses(boil.GetDB(), mods...)
}

// Expenses retrieves all the expense's expense with an executor.
func (o *Currency) Expenses(exec boil.Executor, mods ...qm.QueryMod) expenseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"currency_id\"=?", o.ID),
	)

	query := Expenses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"expense\" as \"a\"")
	return query
}

// IncomesG retrieves all the income's income.
func (o *Currency) IncomesG(mods ...qm.QueryMod) incomeQuery {
	return o.Incomes(boil.GetDB(), mods...)
}

// Incomes retrieves all the income's income with an executor.
func (o *Currency) Incomes(exec boil.Executor, mods ...qm.QueryMod) incomeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"currency_id\"=?", o.ID),
	)

	query := Incomes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"income\" as \"a\"")
	return query
}

// LoadExpenses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (currencyL) LoadExpenses(e boil.Executor, singular bool, maybeCurrency interface{}) error {
	var slice []*Currency
	var object *Currency

	count := 1
	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"expense\" where \"currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load expense")
	}
	defer results.Close()

	var resultSlice []*Expense
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice expense")
	}

	if len(expenseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Expenses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurrencyID {
				local.R.Expenses = append(local.R.Expenses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadIncomes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (currencyL) LoadIncomes(e boil.Executor, singular bool, maybeCurrency interface{}) error {
	var slice []*Currency
	var object *Currency

	count := 1
	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"income\" where \"currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load income")
	}
	defer results.Close()

	var resultSlice []*Income
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice income")
	}

	if len(incomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Incomes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurrencyID {
				local.R.Incomes = append(local.R.Incomes, foreign)
				break
			}
		}
	}

	return nil
}

// AddExpensesG adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Expenses.
// Sets related.R.Currency appropriately.
// Uses the global database handle.
func (o *Currency) AddExpensesG(insert bool, related ...*Expense) error {
	return o.AddExpenses(boil.GetDB(), insert, related...)
}

// AddExpensesP adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Expenses.
// Sets related.R.Currency appropriately.
// Panics on error.
func (o *Currency) AddExpensesP(exec boil.Executor, insert bool, related ...*Expense) {
	if err := o.AddExpenses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExpensesGP adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Expenses.
// Sets related.R.Currency appropriately.
// Uses the global database handle and panics on error.
func (o *Currency) AddExpensesGP(insert bool, related ...*Expense) {
	if err := o.AddExpenses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExpenses adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Expenses.
// Sets related.R.Currency appropriately.
func (o *Currency) AddExpenses(exec boil.Executor, insert bool, related ...*Expense) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrencyID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"expense\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, expensePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.CategoryID, rel.DateTime, rel.Title}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			Expenses: related,
		}
	} else {
		o.R.Expenses = append(o.R.Expenses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &expenseR{
				Currency: o,
			}
		} else {
			rel.R.Currency = o
		}
	}
	return nil
}

// AddIncomesG adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Incomes.
// Sets related.R.Currency appropriately.
// Uses the global database handle.
func (o *Currency) AddIncomesG(insert bool, related ...*Income) error {
	return o.AddIncomes(boil.GetDB(), insert, related...)
}

// AddIncomesP adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Incomes.
// Sets related.R.Currency appropriately.
// Panics on error.
func (o *Currency) AddIncomesP(exec boil.Executor, insert bool, related ...*Income) {
	if err := o.AddIncomes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddIncomesGP adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Incomes.
// Sets related.R.Currency appropriately.
// Uses the global database handle and panics on error.
func (o *Currency) AddIncomesGP(insert bool, related ...*Income) {
	if err := o.AddIncomes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddIncomes adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.Incomes.
// Sets related.R.Currency appropriately.
func (o *Currency) AddIncomes(exec boil.Executor, insert bool, related ...*Income) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrencyID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"income\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, incomePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.CategoryID, rel.DateTime, rel.Title}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			Incomes: related,
		}
	} else {
		o.R.Incomes = append(o.R.Incomes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incomeR{
				Currency: o,
			}
		} else {
			rel.R.Currency = o
		}
	}
	return nil
}

// CurrenciesG retrieves all records.
func CurrenciesG(mods ...qm.QueryMod) currencyQuery {
	return Currencies(boil.GetDB(), mods...)
}

// Currencies retrieves all the records using an executor.
func Currencies(exec boil.Executor, mods ...qm.QueryMod) currencyQuery {
	mods = append(mods, qm.From("\"currency\""))
	return currencyQuery{NewQuery(exec, mods...)}
}

// FindCurrencyG retrieves a single record by ID.
func FindCurrencyG(id int, selectCols ...string) (*Currency, error) {
	return FindCurrency(boil.GetDB(), id, selectCols...)
}

// FindCurrencyGP retrieves a single record by ID, and panics on error.
func FindCurrencyGP(id int, selectCols ...string) *Currency {
	retobj, err := FindCurrency(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrency(exec boil.Executor, id int, selectCols ...string) (*Currency, error) {
	currencyObj := &Currency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(currencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from currency")
	}

	return currencyObj, nil
}

// FindCurrencyP retrieves a single record by ID with an executor, and panics on error.
func FindCurrencyP(exec boil.Executor, id int, selectCols ...string) *Currency {
	retobj, err := FindCurrency(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Currency) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Currency) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Currency) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Currency) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no currency provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	currencyInsertCacheMut.RLock()
	cache, cached := currencyInsertCache[key]
	currencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			currencyColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currency\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into currency")
	}

	if !cached {
		currencyInsertCacheMut.Lock()
		currencyInsertCache[key] = cache
		currencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Currency record. See Update for
// whitelist behavior description.
func (o *Currency) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Currency record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Currency) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Currency, and panics on error.
// See Update for whitelist behavior description.
func (o *Currency) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Currency.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Currency) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	currencyUpdateCacheMut.RLock()
	cache, cached := currencyUpdateCache[key]
	currencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			currencyColumns,
			currencyPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, append(wl, currencyPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update currency row")
	}

	if !cached {
		currencyUpdateCacheMut.Lock()
		currencyUpdateCache[key] = cache
		currencyUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q currencyQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q currencyQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for currency")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CurrencySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CurrencySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CurrencySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in currency slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Currency) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Currency) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Currency) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Currency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no currency provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyUpsertCacheMut.RLock()
	cache, cached := currencyUpsertCache[key]
	currencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			currencyColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			currencyColumns,
			currencyPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPrimaryKeyColumns))
			copy(conflict, currencyPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert currency")
	}

	if !cached {
		currencyUpsertCacheMut.Lock()
		currencyUpsertCache[key] = cache
		currencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Currency record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Currency) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Currency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Currency) DeleteG() error {
	if o == nil {
		return errors.New("models: no Currency provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Currency record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Currency) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Currency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Currency) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Currency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPrimaryKeyMapping)
	sql := "DELETE FROM \"currency\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from currency")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q currencyQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q currencyQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no currencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from currency")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CurrencySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CurrencySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Currency slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CurrencySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Currency slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(currencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from currency slice")
	}

	if len(currencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Currency) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Currency) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Currency) ReloadG() error {
	if o == nil {
		return errors.New("models: no Currency provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Currency) Reload(exec boil.Executor) error {
	ret, err := FindCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CurrencySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CurrencySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CurrencySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	currencies := CurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currency\".* FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&currencies)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrencySlice")
	}

	*o = currencies

	return nil
}

// CurrencyExists checks if the Currency row exists.
func CurrencyExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currency\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if currency exists")
	}

	return exists, nil
}

// CurrencyExistsG checks if the Currency row exists.
func CurrencyExistsG(id int) (bool, error) {
	return CurrencyExists(boil.GetDB(), id)
}

// CurrencyExistsGP checks if the Currency row exists. Panics on error.
func CurrencyExistsGP(id int) bool {
	e, err := CurrencyExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CurrencyExistsP checks if the Currency row exists. Panics on error.
func CurrencyExistsP(exec boil.Executor, id int) bool {
	e, err := CurrencyExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
